<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env node

var fs       = require('fs'),
    path     = require('path'),
    stdin    = process.stdin,
    Comb     = require(process.env.TM_BUNDLE_SUPPORT + '/node_modules/csscomb/lib/csscomb');

var comb         = new Comb(),
    inputString  = '',
    outputString = '',
    syntax       = path.extname(process.env.TM_FILEPATH).substring(1);

var combConfig,
    configFilePath    = '/.csscomb.json',
    globalConfigPath  = process.env.HOME + configFilePath,
    globalConfig,
    projectConfigPath = process.env.TM_PROJECT_DIRECTORY + configFilePath,
    projectConfig;

try {
    globalConfig  = fs.statSync(globalConfigPath);
    projectConfig = fs.statSync(projectConfigPath);
} catch (e) {
    if (e.code !== 'ENOENT') {
        // If it's not a 'file not found' error, throw it again.
        throw e;
    }
}

/*
** Try to get configuration in this order:
**
** 1. .csscomb.json in the TM project's root directory.
** 2. .csscomb.json in the user's home directory
** 3. The default csscomb configuration
*/
if (projectConfig &amp;&amp; projectConfig.isFile()) {
    combConfig = require(projectConfigPath);
} else if (globalConfig &amp;&amp; globalConfig.isFile()) {
    combConfig = require(globalConfigPath);
} else {
    combConfig = Comb.getConfig('csscomb');
}

comb.configure(combConfig);

stdin.resume();
stdin.setEncoding('utf8');
process.stdin.on('data', function(buf) {
    inputString += buf;
});
process.stdin.on('end', function () {
    outputString = comb.processString(inputString, { syntax: syntax });

    process.stdout.write(outputString + '\n');
});


</string>
	<key>input</key>
	<string>document</string>
	<key>inputFormat</key>
	<string>text</string>
	<key>keyEquivalent</key>
	<string>^c</string>
	<key>name</key>
	<string>Comb CSS</string>
	<key>outputCaret</key>
	<string>interpolateByLine</string>
	<key>outputFormat</key>
	<string>text</string>
	<key>outputLocation</key>
	<string>replaceDocument</string>
	<key>scope</key>
	<string>source.css, source.scss, source.less</string>
	<key>uuid</key>
	<string>E51A2199-9B7F-4A39-B2D1-2F7671109E12</string>
	<key>version</key>
	<integer>2</integer>
</dict>
</plist>
