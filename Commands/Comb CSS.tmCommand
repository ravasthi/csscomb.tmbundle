<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>command</key>
	<string>#!/usr/bin/env node

var fs = require('fs');
var Comb = require("csscomb")
var comb = new Comb();
var tilde = require("tilde-expansion");

var BUFSIZE=256;
var buf = new Buffer(BUFSIZE);
var bytesRead;

var concatString = "";

tilde("~/.csscomb.json", function(s) {
  comb.configure(require(s));
});

while (true) { // Loop as long as stdin input is available.
    bytesRead = 0;
    try {
        bytesRead = fs.readSync(process.stdin.fd, buf, 0, BUFSIZE);
    } catch (e) {
        if (e.code === 'EAGAIN') { // 'resource temporarily unavailable'
            // Happens on OS X 10.8.3 (not Windows 7!), if there's no
            // stdin input - typically when invoking a script without any
            // input (for interactive stdin input).
            // If you were to just continue, you'd create a tight loop.
            console.error('ERROR: interactive stdin input not supported.');
            process.exit(1);
        } else if (e.code === 'EOF') {
            // Happens on Windows 7, but not OS X 10.8.3:
            // simply signals the end of *piped* stdin input.
            break;
        }
        throw e; // unexpected exception
    }
    if (bytesRead === 0) {
        // No more stdin input available.
        // OS X 10.8.3: regardless of input method, this is how the end
        //   of input is signaled.
        // Windows 7: this is how the end of input is signaled for
        //   *interactive* stdin input.
        break;
    }
  // Process the chunk read.
  concatString += buf.toString(null, 0, bytesRead);
}

fs.writeSync(process.stdout.fd, comb.processString(concatString));</string>
	<key>input</key>
	<string>document</string>
	<key>keyEquivalent</key>
	<string>^c</string>
	<key>name</key>
	<string>Comb CSS</string>
	<key>outputCaret</key>
	<string>interpolateByLine</string>
	<key>outputLocation</key>
	<string>replaceDocument</string>
	<key>uuid</key>
	<string>E51A2199-9B7F-4A39-B2D1-2F7671109E12</string>
</dict>
</plist>
