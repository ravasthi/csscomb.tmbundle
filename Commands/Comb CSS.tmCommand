<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env node

var fs   = require('fs'),
    path = require('path'),
    Comb = require(process.env.TM_BUNDLE_SUPPORT + '/node_modules/csscomb/lib/csscomb');

var BUFSIZE      = 256,
    buf          = new Buffer(BUFSIZE),
    bytesRead,
    comb         = new Comb(),
    concatString = '',
    syntax       = path.extname(process.env.TM_FILEPATH).substring(1);

var combConfig,
    configFilePath    = '/.csscomb.json',
    globalConfigPath  = process.env.HOME + configFilePath,
    globalConfig,
    projectConfigPath = process.env.TM_PROJECT_DIRECTORY + configFilePath,
    projectConfig;

try {
  globalConfig  = fs.statSync(globalConfigPath);
  projectConfig = fs.statSync(projectConfigPath);
} catch (e) {
  if (e.code !== 'ENOENT') {
    // If it's not a 'file not found' error, throw it again.
    throw e;
  }
}

/*
** Try to get configuration in this order:
**
** 1. .csscomb.json in the TM project's root directory.
** 2. .csscomb.json in the user's home directory
** 3. The default csscomb configuration
*/
if (projectConfig &amp;&amp; projectConfig.isFile()) {
  combConfig = require(projectConfigPath);
} else if (globalConfig &amp;&amp; globalConfig.isFile()) {
  combConfig = require(globalConfigPath);
} else {
  combConfig = Comb.getConfig('csscomb');
}

comb.configure(combConfig)

while (true) { // Loop as long as stdin input is available.
    bytesRead = 0;
    try {
        bytesRead = fs.readSync(process.stdin.fd, buf, 0, BUFSIZE);
    } catch (e) {
        if (e.code === 'EAGAIN') { // 'resource temporarily unavailable'
            // Happens on OS X 10.8.3 (not Windows 7!), if there's no
            // stdin input - typically when invoking a script without any
            // input (for interactive stdin input).
            // If you were to just continue, you'd create a tight loop.
            console.error('ERROR: interactive stdin input not supported.');
            process.exit(1);
        } else if (e.code === 'EOF') {
            // Happens on Windows 7, but not OS X 10.8.3:
            // simply signals the end of *piped* stdin input.
            break;
        }
        throw e; // unexpected exception
    }
    if (bytesRead === 0) {
        // No more stdin input available.
        // OS X 10.8.3: regardless of input method, this is how the end
        //   of input is signaled.
        // Windows 7: this is how the end of input is signaled for
        //   *interactive* stdin input.
        break;
    }
  // Process the chunk read.
  concatString += buf.toString(null, 0, bytesRead);
}

fs.writeSync(process.stdout.fd, comb.processString(concatString, { syntax: syntax }));
</string>
	<key>input</key>
	<string>selection</string>
	<key>inputFormat</key>
	<string>text</string>
	<key>keyEquivalent</key>
	<string>^c</string>
	<key>name</key>
	<string>Comb CSS</string>
	<key>outputCaret</key>
	<string>interpolateByLine</string>
	<key>outputFormat</key>
	<string>text</string>
	<key>outputLocation</key>
	<string>replaceSelection</string>
	<key>scope</key>
	<string>source.css, source.scss, source.less</string>
	<key>uuid</key>
	<string>E51A2199-9B7F-4A39-B2D1-2F7671109E12</string>
	<key>version</key>
	<integer>2</integer>
</dict>
</plist>
